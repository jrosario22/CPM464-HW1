{"version":3,"sources":["images/nfl.png","images/dog.png","components/Projects.js","components/Contact.js","components/About.js","components/Home.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Projects","className","src","dog","alt","href","nfl","Contact","props","handleChangeName","event","setState","name","target","value","handleChangeSubject","subject","handleChangeMessage","message","bind","handleSubmit","state","preventDefault","onSubmit","this","type","onChange","URL","handleChangeURL","React","Component","About","Home","Boolean","window","location","hostname","match","ReactDOM","render","to","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,uRCK5B,SAASC,IACtB,OACE,6BACE,wCACA,6BACE,yBAAKC,UAAU,WACb,yCACA,yBAAKC,IAAKC,IAAKC,IAAI,QACnB,8EACA,uBAAGC,KAAK,2CAAR,aAEF,yBAAKJ,UAAU,WACb,wDACA,yBAAKC,IAAKI,IAAKF,IAAI,aACnB,8HAE6B,KAE7B,uBAAGC,KAAK,uDAAR,YAGA,uBAAGA,KAAK,4DAAR,e,mDCvBWE,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CACZC,KAAMF,EAAMG,OAAOC,SAXJ,EAenBC,oBAAsB,SAACL,GACrB,EAAKC,SAAS,CACZK,QAASN,EAAMG,OAAOC,SAjBP,EAqBnBG,oBAAsB,SAACP,GACrB,EAAKC,SAAS,CACZO,QAASR,EAAMG,OAAOC,SArBxB,EAAKL,iBAAmB,EAAKA,iBAAiBU,KAAtB,gBACxB,EAAKJ,oBAAsB,EAAKA,oBAAoBI,KAAzB,gBAC3B,EAAKF,oBAAsB,EAAKA,oBAAoBE,KAAzB,gBAC3B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CAAET,KAAM,GAAII,QAAS,GAAIE,QAAS,IAN9B,E,0EA2BNR,GACXA,EAAMY,mB,+BAIN,OACE,6BACE,uCACA,kGAGA,0BAAMC,SAAUC,KAAKJ,aAAcnB,UAAU,aAC3C,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,wCAEF,yBAAKA,UAAU,UACb,2BACEwB,KAAK,OACLX,MAAOU,KAAKH,MAAMT,KAClBc,SAAUF,KAAKf,qBAIrB,yBAAKR,UAAU,OACb,yBAAKA,UAAU,UACb,2CAEF,yBAAKA,UAAU,UACb,2BACEwB,KAAK,OACLX,MAAOU,KAAKH,MAAML,QAClBU,SAAUF,KAAKT,wBAIrB,yBAAKd,UAAU,OACb,yBAAKA,UAAU,UACb,2CAEF,yBAAKA,UAAU,UACb,8BACEwB,KAAK,OACLX,MAAOU,KAAKH,MAAMM,IAClBD,SAAUF,KAAKI,oBAIrB,yBAAK3B,UAAU,OACb,4BAAQwB,KAAK,UAAb,iB,GA7EyBI,IAAMC,Y,MCA5B,SAASC,IACtB,OACE,6BACE,qCACA,yBAAK9B,UAAU,SACb,8HAIA,sHAIA,+F,MCbO,SAAS+B,IACtB,OACE,yBAAK/B,UAAU,QACb,qCACA,kDACA,mD,MCIcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCGD,WACb,OACE,kBAAC,IAAD,KACE,yBAAKtC,UAAU,OACb,wBAAIA,UAAU,cACZ,4BACE,kBAAC,IAAD,CAAMuC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YDjCI,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.cc57720d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nfl.271579d5.png\";","module.exports = __webpack_public_path__ + \"static/media/dog.c6678581.png\";","import React from \"react\";\nimport nfl from \"../images/nfl.png\";\nimport dog from \"../images/dog.png\";\nimport \"../css/Projects.css\";\n\nexport default function Projects() {\n  return (\n    <div>\n      <h2>Projects</h2>\n      <div>\n        <div className=\"project\">\n          <h4>Giphy App</h4>\n          <img src={dog} alt=\"dog\"></img>\n          <h5>A web app that uses Giphy's API to render gifs</h5>\n          <a href=\"https://github.com/jrosario22/giphy-api\">See Code</a>\n        </div>\n        <div className=\"project\">\n          <h4>2018 NFL Rushing Leaders</h4>\n          <img src={nfl} alt=\"nfl-data\"></img>\n          <h5>\n            Analyzed the rushing statistics of the 2018 NFL season to learn more\n            about the game of football{\" \"}\n          </h5>\n          <a href=\"https://github.com/jrosario22/2018NFLRushingLeaders\">\n            See Code\n          </a>\n          <a href=\"https://sites.google.com/view/2018nflrushingleaders/home\">\n            See Data\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../css/Contact.css\";\n\nexport default class Contact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.handleChangeMessage = this.handleChangeMessage.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { name: \"\", subject: \"\", message: \"\" };\n  }\n\n  handleChangeName = (event) => {\n    this.setState({\n      name: event.target.value,\n    });\n  };\n\n  handleChangeSubject = (event) => {\n    this.setState({\n      subject: event.target.value,\n    });\n  };\n\n  handleChangeMessage = (event) => {\n    this.setState({\n      message: event.target.value,\n    });\n  };\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Contact</h2>\n        <h3>\n          If you'd like to make an enquiry, please feel free to get in touch\n        </h3>\n        <form onSubmit={this.handleSubmit} className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-25\">\n              <label>Name</label>\n            </div>\n            <div className=\"col-75\">\n              <input\n                type=\"text\"\n                value={this.state.name}\n                onChange={this.handleChangeName}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-25\">\n              <label>Subject</label>\n            </div>\n            <div className=\"col-75\">\n              <input\n                type=\"text\"\n                value={this.state.subject}\n                onChange={this.handleChangeSubject}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-25\">\n              <label>Message</label>\n            </div>\n            <div className=\"col-75\">\n              <textarea\n                type=\"text\"\n                value={this.state.URL}\n                onChange={this.handleChangeURL}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <button type=\"submit\">Submit</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../css/About.css\";\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <div className=\"about\">\n        <h4>\n          I'm a graduating senior at Lehman College, double majoring in computer\n          science and mathematics\n        </h4>\n        <h4>\n          I've worked as a software engineer and teaching assistant to web\n          development bootcamps\n        </h4>\n        <h4>When I'm not problem solving, I enjoy hanging out with my dog</h4>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../css/Home.css\";\n\nexport default function Home() {\n  return (\n    <div className=\"home\">\n      <h2>Hello</h2>\n      <h2>I am Jeson Rosario</h2>\n      <h3>Software Developer</h3>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Projects from \"./components/Projects\";\nimport Contact from \"./components/Contact\";\nimport About from \"./components/About\";\nimport Home from \"./components/Home\";\nimport \"./index.css\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <ul className=\"navigation\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/projects\">Projects</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Contact</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}